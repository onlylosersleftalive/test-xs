{"version":3,"sources":["components/Filter.js","components/Card.js","components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Filter","props","filtersChangeHandler","cityFilter","monthFilter","filterChangeHandler","className","value","city","onChange","event","cityFilterValue","target","sortByCity","month","monthFilterValue","sortByMonth","Card","useState","liked","setLiked","style","backgroundImage","image","eventDate","substr","onClick","eventName","Results","console","log","data","map","i","name","date","changeEventsData","App","selectedCity","selectedMonth","userFilters","setUserFilters","selectedEventsData","setSelectedEventsData","prevState","fetch","then","response","json","filter","element","getMonth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26f0e811.chunk.js","sourcesContent":["import \"./Filter.css\";\r\n\r\nconst Filter = (props) => {\r\n  const filtersChangeHandler = (cityFilter, monthFilter) => {\r\n    props.filterChangeHandler(cityFilter, monthFilter);\r\n  };\r\n\r\n  const cityChangeHandler = (event) => {\r\n    let cityFilterValue = event.target.value;\r\n    props.sortByCity(cityFilterValue);\r\n    filtersChangeHandler(cityFilterValue, props.month);\r\n  };\r\n\r\n  const monthChangeHandler = (event) => {\r\n    let monthFilterValue = event.target.value;\r\n    props.sortByMonth(monthFilterValue);\r\n    filtersChangeHandler(props.city, monthFilterValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"filters\">\r\n      <div className=\"filter-container\">\r\n        <div className=\"filter\">\r\n          <label>City:</label>\r\n          <select value={props.city} onChange={cityChangeHandler}>\r\n            <option value=\"All\">All</option>\r\n            <option value=\"Amsterdam\">Amsterdam</option>\r\n            <option value=\"Berlin\">Berlin</option>\r\n            <option value=\"Rim\">Rome</option>\r\n            <option value=\"St.Petersburg\">St.Petersburg</option>\r\n          </select>\r\n          <span className=\"custom-arrow\">\r\n            <i className=\"fas fa-chevron-down\" />\r\n          </span>\r\n        </div>\r\n        <div className=\"filter\">\r\n          <label className=\"month-label\">Month:</label>\r\n          <select value={props.month} onChange={monthChangeHandler}>\r\n            <option value=\"All\">All</option>\r\n            <option value=\"january\">January</option>\r\n            <option value=\"february\">February</option>\r\n            <option value=\"march\">March</option>\r\n            <option value=\"april\">April</option>\r\n            <option value=\"may\">May</option>\r\n            <option value=\"june\">June</option>\r\n            <option value=\"july\">July</option>\r\n            <option value=\"august\">August</option>\r\n            <option value=\"september\">September</option>\r\n            <option value=\"october\">October</option>\r\n            <option value=\"november\">November</option>\r\n            <option value=\"december\">December</option>{\" \"}\r\n          </select>\r\n          <span className=\"custom-arrow\">\r\n            <i className=\"fas fa-chevron-down\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"checkbox\">\r\n        <input type=\"checkbox\" />\r\n        <p>Liked</p>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useState } from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  const [liked, setLiked] = useState(true);\r\n\r\n  const likeHandler = () => {\r\n    setLiked(!liked);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\" style={{ backgroundImage: `url(${props.image})` }}>\r\n      <div className=\"card-content\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"date info\">{props?.eventDate.substr(0, 2)}</div>\r\n          <button onClick={likeHandler}>\r\n            {!liked ? (\r\n              <i className=\"fas fa-bookmark\"></i>\r\n            ) : (\r\n              <i className=\"far fa-bookmark\"></i>\r\n            )}\r\n          </button>\r\n        </div>\r\n        <p className=\"name info\">{props.eventName}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import \"./Results.css\";\r\nimport Card from \"./Card\";\r\n\r\nconst Results = (props) => {\r\n  console.log(props.data);\r\n  return (\r\n    <div className=\"results\">\r\n      {props?.data?.map((event, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            eventName={event.name}\r\n            eventDate={event.date}\r\n            image={event.image}\r\n            changeEventsData={props.changeEventsData}\r\n            data={props.data}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Filter from \"./components/Filter\";\nimport Results from \"./components/Results\";\n\nfunction App() {\n  const [userFilters, setUserFilters] = useState({\n    selectedCity: \"All\",\n    selectedMonth: \"All\",\n  });\n  const [selectedEventsData, setSelectedEventsData] = useState([]);\n\n  const getMonth = (date) => {\n    let month = date.substr(3, 2);\n    switch (month) {\n      case \"01\":\n        return \"january\";\n        break;\n      case \"02\":\n        return \"february\";\n        break;\n      case \"03\":\n        return \"march\";\n        break;\n      case \"04\":\n        return \"april\";\n        break;\n      case \"05\":\n        return \"may\";\n        break;\n      case \"06\":\n        return \"june\";\n        break;\n      case \"07\":\n        return \"july\";\n        break;\n      case \"08\":\n        return \"august\";\n        break;\n      case \"09\":\n        return \"september\";\n        break;\n      case \"10\":\n        return \"october\";\n        break;\n      case \"11\":\n        return \"november\";\n        break;\n      case \"12\":\n        return \"december\";\n        break;\n      case \"All\":\n        return \"All\";\n        break;\n      default:\n        return \"january\";\n        break;\n    }\n  };\n\n  const filterChangeHandler = (cityFilter, monthFilter) => {\n    fetch(\n      \"https://raw.githubusercontent.com/xsolla/xsolla-frontend-school-2021/main/events.json\"\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        if (cityFilter === \"All\" && monthFilter === \"All\") {\n          setSelectedEventsData(data);\n        } else {\n          setSelectedEventsData(\n            data.filter((element) => {\n              let month = getMonth(element.date);\n              if (element.city === cityFilter && month === monthFilter) {\n                return element;\n              } else if (element.city === cityFilter && monthFilter === \"All\") {\n                return element;\n              } else if (cityFilter === \"All\" && month === monthFilter) {\n                return element;\n              }\n            })\n          );\n        }\n      });\n  };\n\n  const cityChangeHandler = (city) => {\n    setUserFilters((prevState) => {\n      return { ...prevState, selectedCity: city };\n    });\n  };\n\n  const monthChangeHandler = (month) => {\n    setUserFilters((prevState) => {\n      return { ...prevState, selectedMonth: month };\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Event Listing</h1>\n      <Filter\n        city={userFilters.selectedCity}\n        month={userFilters.selectedMonth}\n        sortByCity={cityChangeHandler}\n        sortByMonth={monthChangeHandler}\n        filterChangeHandler={filterChangeHandler}\n      />\n      <Results data={selectedEventsData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}